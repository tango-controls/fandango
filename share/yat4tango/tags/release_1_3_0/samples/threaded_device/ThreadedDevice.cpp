static const char *RcsId = "$Header: /usr/local/CVS/Libraries/YAT4tango/samples/threaded_device/ThreadedDevice.cpp,v 1.1 2007/07/18 13:09:43 leclercq Exp $";
//+=============================================================================
//
// file :         ThreadedDevice.cpp
//
// description :  C++ source for the ThreadedDevice and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                ThreadedDevice are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: leclercq $
//
// $Revision: 1.1 $
//
// $Log: ThreadedDevice.cpp,v $
// Revision 1.1  2007/07/18 13:09:43  leclercq
// no message
//
// Revision 1.3  2007/07/18 13:02:50  leclercq
// Added a threaded device example
//
// Revision 1.1  2007/07/18 12:57:05  leclercq
// Added a threaded device example
//
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

//===================================================================
//
//	The folowing table gives the correspondance
//	between commands and method's name.
//
//  Command's name|  Method's name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================

#include <tango.h>
#include <ThreadedDevice.h>
#include <ThreadedDeviceClass.h>

// ============================================================================
// DEVICE TASK ACTIVITY PERIOD IN MILLISECS
// ============================================================================
//- the following timeout set the frequency at which the task generates its data
#define kTASK_PERIODIC_TIMEOUT_MS 500

// ============================================================================
// SOME USER DEFINED MESSAGES
// ============================================================================
#define kDOUBLE_SCALAR_MSG (yat::FIRST_USER_MSG + 1000)

namespace ThreadedDevice_ns
{

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::ThreadedDevice(string &s)
// 
// description : 	constructor for simulated ThreadedDevice
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
ThreadedDevice::ThreadedDevice(Tango::DeviceClass *cl,string &s)
:Tango::Device_3Impl(cl,s.c_str())
{
	init_device();
}

ThreadedDevice::ThreadedDevice(Tango::DeviceClass *cl,const char *s)
:Tango::Device_3Impl(cl,s)
{
	init_device();
}

ThreadedDevice::ThreadedDevice(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_3Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::delete_device()
{
	//	Delete device's allocated object
	
	//- release the task
	if (this->dev_task)
	{
		//- ask the task to quit
	  this->dev_task->exit();
    //- !!!!! NEVER TRY TO <delete> a yat4tango::DeviceTask, it commits suicide 
    //- upon return of its main function (i.e. entry point)!!!!!!
	  this->dev_task = 0;
	}

  //- release the data
	if (this->dev_data)
	{
	  delete this->dev_data;
	  this->dev_data = 0;
	}
}

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::init_device()
{
	INFO_STREAM << "ThreadedDevice::ThreadedDevice() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	this->value = 0;
  this->dev_data = 0;
  this->dev_task = 0;

  //- instanciate the task
	try
	{
		//- task allocation
		DEBUG_STREAM << "ThreadedDevice::init_device::allocating DeviceTask" << std::endl;
	  this->dev_task = new MyDeviceTask(kTASK_PERIODIC_TIMEOUT_MS, this);
	  if (this->dev_task == 0)
      throw std::bad_alloc();

    //- start the task
    DEBUG_STREAM << "ThreadedDevice::init_device::starting task" << std::endl;
    this->dev_task->go();
  }
  catch (const std::bad_alloc&)
  {
  	ERROR_STREAM << "initialization failed - - MyYatTask allocation failed" << std::endl;
    this->set_status ("initialization failed - MyYatTask allocation failed");
    this->set_state (Tango::FAULT);
    this->delete_device ();
    return; 
  }
  catch (Tango::DevFailed & df)
  {
  	ERROR_STREAM << df << std::endl;
    this->set_status ("initialization failed");
    this->set_state (Tango::FAULT);
    this->delete_device ();
    return;
  }
  catch (...)
  {
    ERROR_STREAM << "initialization failed - unknown error" << std::endl;
    this->set_status ("initialization failed [unknown error]");
    this->set_state (Tango::FAULT);
    this->delete_device ();
    return;
  }

  //- update sate and status
  this->set_state (Tango::RUNNING);
  this->set_status ("device is up and running");
  DEBUG_STREAM << "device successfully initialized" << std::endl;
}

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void ThreadedDevice::always_executed_hook()
{
	
}

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "ThreadedDevice::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
	
	if (this->dev_task == 0)
	{
    Tango::Except::throw_exception (_CPTC ("INTERNAL_ERROR"),
                                    _CPTC ("device is not properly initialized"),
                                    _CPTC ("ThreadedDevice::read_attr_hardware"));
  }

  //- release any exitsing data
	if (this->dev_data)
	{
	  delete this->dev_data;
	  this->dev_data = 0;
	}
	
  //- get data from the task (may throw a Tango::DevFailed)
  this->dev_data = this->dev_task->get_data();
}


//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::read_ramdomVector
// 
// description : 	Extract real attribute values for ramdomVector acquisition result.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::read_ramdomVector(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ThreadedDevice::read_ramdomVector(Tango::Attribute &attr) entering... "<< endl;
	//- data was previously obtained from ThreadedDevice::read_attr_hardware
	//- just pass the data back to the TANGO layer...
  attr.set_value(this->dev_data->base(), this->dev_data->length());
}

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::write_postThisValueToTheTask
// 
// description : 	Write postThisValueToTheTask attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::write_postThisValueToTheTask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ThreadedDevice::write_postThisValueToTheTask(Tango::WAttribute &attr) entering... "<< endl;

  //- get actual value
  attr.get_write_value(this->value);

  //- in case you want to wait for the msg to be handled before returning (synchronous approach)
  //- be sure to allocate a "waitable" message...
  bool waitable = true;
  
  //- instanciate a message of type kDOUBLE_SCALAR_MSG
  yat::Message * msg = new yat::Message(kDOUBLE_SCALAR_MSG, DEFAULT_MSG_PRIORITY, waitable);
  if (msg == 0)
  {
    Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                    _CPTC ("yat::Message allocation failed"),
                                    _CPTC ("ThreadedByComposition::write_postThisValueToTheTask"));
  }

  //- attach the value to the msg:
  //- be aware that the msg gets ownership of the data when it si attached by reference (i.e. pointer)
  //- never attach a pointer to one of the device attribute (i.e. one of the pointer generated by POGO)
  //- it will be delete otherwise. in such a case, just pass it by value by dereferencing the pointer.
  //- here we use the <value> member (which is not a pointer). thanks to the template impl of 
  //- yat::Message::attach_data, we could attach any kind of data. here we just attach a single double by value...
  msg->attach_data(this->value);

  //- in case you want to wait for the msg to be handled before returning (synchronous approach)
  //- just do the following...
  this->dev_task->wait_msg_handled(msg, 5000);

  //- here we choose to post the message to the task and return immediatly (asynchronous approach)
  //- this->dev_task->post(msg);
}

//+----------------------------------------------------------------------------
//
// method : 		ThreadedDevice::read_postThisValueToTheTask
// 
// description : 	Extract real attribute values for postThisValueToTheTask acquisition result.
//
//-----------------------------------------------------------------------------
void ThreadedDevice::read_postThisValueToTheTask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ThreadedDevice::read_postThisValueToTheTask(Tango::Attribute &attr) entering... "<< endl;
	attr.set_value(&this->value);
}

}	//	namespace
