// ----------------------------------------------------------------------------
// yat adapted/modified/enhanced hack of omniThread portable threading impl.
// see http://omniorb.sourceforge.net for more omniORB details
// ----------------------------------------------------------------------------

namespace yat {

// ****************************************************************************
// YAT DUMMY_MUTEX IMPL
// ****************************************************************************
// ----------------------------------------------------------------------------
// DummyMutex::lock
// ----------------------------------------------------------------------------
INLINE_IMPL void DummyMutex::lock (void)
{
 //- noop
}
// ----------------------------------------------------------------------------
// DummyMutex::acquire
// ----------------------------------------------------------------------------
INLINE_IMPL void DummyMutex::acquire (void)
{
 //- noop
}
// ----------------------------------------------------------------------------
// DummyMutex::unlock
// ----------------------------------------------------------------------------
INLINE_IMPL void DummyMutex::unlock (void)
{
 //- noop
}
// ----------------------------------------------------------------------------
// DummyMutex::release
// ----------------------------------------------------------------------------
INLINE_IMPL void DummyMutex::release (void)
{
 //- noop
}
// ----------------------------------------------------------------------------
// DummyMutex::try_lock
// ----------------------------------------------------------------------------
INLINE_IMPL MutexState DummyMutex::try_lock (void)
{
  return yat::MUTEX_LOCKED;
}
// ----------------------------------------------------------------------------
// DummyMutex::try_acquire
// ----------------------------------------------------------------------------
INLINE_IMPL MutexState DummyMutex::try_acquire (void)
{
  return yat::MUTEX_LOCKED;
}

// ****************************************************************************
// YAT MUTEX IMPL
// ****************************************************************************
// ----------------------------------------------------------------------------
// Mutex::lock
// ----------------------------------------------------------------------------
INLINE_IMPL void Mutex::lock (void)
{
#error no impl
}
// ----------------------------------------------------------------------------
// Mutex::acquire
// ----------------------------------------------------------------------------
INLINE_IMPL void Mutex::acquire (void)
{
  this->lock();
}
// ----------------------------------------------------------------------------
// Mutex::try_acquire
// ----------------------------------------------------------------------------
MutexState Mutex::try_acquire (void)
{
  return this->try_lock();
}
// ----------------------------------------------------------------------------
// Mutex::unlock
// ----------------------------------------------------------------------------
INLINE_IMPL void Mutex::unlock (void)
{
#error no impl
}
// ----------------------------------------------------------------------------
// Mutex::acquire
// ----------------------------------------------------------------------------
INLINE_IMPL void Mutex::release (void)
{
  this->unlock();
}

// ****************************************************************************
// YAT THREAD IMPL
// ****************************************************************************
// ----------------------------------------------------------------------------
// Thread::priority
// ----------------------------------------------------------------------------
INLINE_IMPL Priority Thread::priority (void) const
{
  //- enter critical section
  yat::SmartMutex guard(this->m_lock);

  return this->m_priority;
}
// ----------------------------------------------------------------------------
// Thread::state
// ----------------------------------------------------------------------------
INLINE_IMPL State Thread::state (void) const
{
  //- enter critical section
  yat::SmartMutex guard(this->m_lock);

  return this->m_state;
}
// ----------------------------------------------------------------------------
// Thread::yield
// ----------------------------------------------------------------------------
INLINE_IMPL void Thread::yield (void)
{
#error no impl
}
// ----------------------------------------------------------------------------
// Thread::sleep
// ----------------------------------------------------------------------------
INLINE_IMPL void Thread::sleep (unsigned long _tmo_msecs)
{
  ThreadingUtilities::sleep(0, 1000000 * _tmo_msecs);
}
// ----------------------------------------------------------------------------
// Thread::self
// ----------------------------------------------------------------------------
INLINE_IMPL ThreadUID Thread::self (void) const
{
  return this->m_uid;
}

} // namespace yat
