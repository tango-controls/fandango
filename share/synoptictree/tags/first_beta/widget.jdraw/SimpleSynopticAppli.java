/**
 * SimpleSynopticAppli.java
 *
 * Created on May 25, 2005
 */

package fr.esrf.tangoatk.widget.jdraw;

import java.io.*;
import java.util.*;
import fr.esrf.tangoatk.widget.jdraw.*;
import fr.esrf.tangoatk.widget.util.ErrorHistory;
import fr.esrf.tangoatk.widget.util.ATKGraphicsUtils;
import fr.esrf.tangoatk.widget.util.jdraw.JDFileFilter;

import javax.swing.*;

/** ******************************************************************************************************
The SimpleSynopticAppli class has been modified to:
	- Change the exitForm behavior to not close parent application on exit
*********************************************************************************************************/

/**
 *
 * @author  PONCET
 */
public class SimpleSynopticAppli extends javax.swing.JFrame {

    private  ErrorHistory        errorHistory;
    private  boolean	         standAlone = false;
    private  boolean             fileLoaded = false;

    /** Creates new form SimpleSynopticAppli */
    public SimpleSynopticAppli()
    {
	fileLoaded = false;
	standAlone = false;
        errorHistory = new ErrorHistory();
        initComponents();
    }
    
    public SimpleSynopticAppli(String jdrawFullFileName)
    {
	this(jdrawFullFileName,false);
    }
    
    public SimpleSynopticAppli(String jdrawFullFileName, boolean stand)
    {
	this();	
	System.out.println("In SimpleSynopticAppli() ...");
	standAlone = stand;
	fileName = jdrawFullFileName;
	setTitle(fileName);
        try
        {
            tangoSynopHandler.setSynopticFileName(jdrawFullFileName);
            tangoSynopHandler.setToolTipMode(TangoSynopticHandler.TOOL_TIP_NAME);
	    tangoSynopHandler.setAutoZoom(true);
        }
        catch (FileNotFoundException  fnfEx)
        {
            javax.swing.JOptionPane.showMessageDialog(
             null, "Cannot find the synoptic file : " + jdrawFullFileName + ".\n"
                  + "Check the file name you entered;"
                  + " Application will abort ...\n"
                  + fnfEx,
                  "No such file",
                  javax.swing.JOptionPane.ERROR_MESSAGE);
            //if (standAlone) System.exit(-1); else
	    	this.dispose();
        }
        catch (IllegalArgumentException  illEx)
        {
            javax.swing.JOptionPane.showMessageDialog(
             null, "Cannot parse the synoptic file : " + jdrawFullFileName + ".\n"
                  + "Check if the file is a Jdraw file."
                  + " Application will abort ...\n"
                  + illEx,
                  "Cannot parse the file",
                  javax.swing.JOptionPane.ERROR_MESSAGE);
            //if (standAlone) System.exit(-1); else
	    	this.dispose();
        }
        catch (MissingResourceException  mrEx)
        {
            javax.swing.JOptionPane.showMessageDialog(
             null, "Cannot parse the synoptic file : " + jdrawFullFileName + ".\n"
                  + " Application will abort ...\n"
                  + mrEx,
                  "Cannot parse the file",
                  javax.swing.JOptionPane.ERROR_MESSAGE);
            //if (standAlone) System.exit(-1); else 
	    	this.dispose();
        }
	System.out.println("In SimpleSynopticAppli(), fileLoaded=true");
	fileLoaded = true;
	setTitle(jdrawFullFileName);
        pack();
     }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        tangoSynopHandler = new fr.esrf.tangoatk.widget.jdraw.TangoSynopticHandler();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        quitJMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        errHistMenuItem = new javax.swing.JMenuItem();
        diagtMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        addWindowListener(new java.awt.event.WindowAdapter() {
	    public void windowClosed(java.awt.event.WindowEvent evt) {
		tangoSynopHandler.windowClosed(evt);
		}
            public void windowClosing(java.awt.event.WindowEvent evt) {
		tangoSynopHandler.windowClosed(evt);
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        if (errorHistory != null)
        {
            try
            {
                tangoSynopHandler.setErrorHistoryWindow(errorHistory);
            }
            catch (Exception setErrwExcept)
            {
                System.out.println("Cannot set Error History Window");
            }
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(tangoSynopHandler, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        fileJMenu.setText("File");
        quitJMenuItem.setText("Quit");
        quitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJMenuItemActionPerformed(evt);
            }
        });

        fileJMenu.add(quitJMenuItem);

        jMenuBar1.add(fileJMenu);

        viewMenu.setText("View");
	
        errHistMenuItem.setText("Error History ...");
        errHistMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errHistMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(errHistMenuItem);

        diagtMenuItem.setText("Diagnostic ...");
        diagtMenuItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fr.esrf.tangoatk.widget.util.ATKDiagnostic.showDiagnostic();
                }
            });

        viewMenu.add(diagtMenuItem);
        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void errHistMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errHistMenuItemActionPerformed
        // TODO add your handling code here:
	errorHistory.setVisible(true);        
    }//GEN-LAST:event_errHistMenuItemActionPerformed

    private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitJMenuItemActionPerformed
        // TODO add your handling code here:
        stopSimpleSynopticAppli();
    }//GEN-LAST:event_quitJMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        stopSimpleSynopticAppli();
    }//GEN-LAST:event_exitForm

    private void stopSimpleSynopticAppli()
    {
        if (standAlone == true)
	   System.exit(0);
	else
	{
	   tangoSynopHandler.getAttributeList().stopRefresher();
	   this.dispose();
	}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
	String fullFileName = null;
	SimpleSynopticAppli syApp = null;
	String arg0 = null, arg1 = null;

	if (args.length >= 2) // The synoptic file name and the directory are specified
	{
	    arg0 = args[0];
	    arg1 = args[1];

	    if (arg0 == null)
               fullFileName = arg1;
        else if (arg0.length() <= 0)
        	  fullFileName = arg1;
	       else
        	  fullFileName = arg0 + "/" + arg1;
      } else if (args.length == 1) // Only the synoptic absolute file name is specified
	    {
	       fullFileName = args[0];
      }

      if (fullFileName == null) {

	    JFileChooser chooser = new JFileChooser(".");
        chooser.setDialogTitle("[SimpleSynopticAppli] Open a synoptic file.");
	    JDFileFilter jdwFilter = new JDFileFilter("JDraw synoptic",new String[]{"jdw"});
	    chooser.addChoosableFileFilter(jdwFilter);
	    int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
               File f = chooser.getSelectedFile();
               fullFileName = f.getAbsolutePath();
        } else {
               System.exit(0);
	    }

      }
	   
      syApp = new SimpleSynopticAppli(fullFileName);
      syApp.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	ATKGraphicsUtils.centerFrameOnScreen(syApp);
      syApp.setVisible(true);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem errHistMenuItem;
    private javax.swing.JMenuItem diagtMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem quitJMenuItem;
    private fr.esrf.tangoatk.widget.jdraw.TangoSynopticHandler tangoSynopHandler;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
    
    private String fileName;
}
